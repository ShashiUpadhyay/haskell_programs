1. Write a Haskell function slice i j lt that returns a list containing elements between the ith and the jth element of list lt. Assume that i < j and the length of lt is greater than j.E.g. > slice 3 6 [2,3,5,7,9,8,1,4][5,7,9,8] //returns elements between the 3rd and 6th element of the list
2.Write a Haskell function delete k lt that removes every kth element of a list lt.E.g. > delete 2 [3,4,5,6,7,8,9][3,5,7,9]3.Consider the binary tree defined below:data Tree = Leaf Int | Node Tree Int TreeE.g., Node (Node (Leaf 1) 3 (Leaf 4)) 5 (Node (Leaf 6) 7 (Leaf 9)) specifies the tree:! Define a function occurs x bt that checks if an integer x occurs in a binary tree bt.E.g. > occurs 9 (Node (Node (Leaf 1) 3 (Leaf 4)) 5 (Node (Leaf 6) 7 (Leaf 9)))True4.Write a Haskell function sortlist lt which sorts a list lt of integer lists according to the length of the sublists in lt (in ascending order).E.g: > sortlist([[1,2],[1,2,3],[2,3],[4],[1,2,5,4],[2,3,1]])[[4],[1,2],[2,3],[1,2,3],[2,3,1],[1,2,5,4]]5. Write a Haskell function flatten lt, which transforms a list lt of lists of integers into a “flat” list by replacing each sublist in lt with its elements.E.g. > flatten [[1,2],[2,3]][1,2,2,3]